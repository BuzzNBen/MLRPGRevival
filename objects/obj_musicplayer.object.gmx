<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init FMODGMS
{
    randomize();

    FMODGMS_Util_SecondsToSamples(2,44100);

    // Create the system
    FMODGMS_Sys_Create();
    
    // Uncomment out the line below to use ASIO on Windows.
    //FMODGMS_Sys_Set_OutputMode(FMODGMS_OUTPUTTYPE_ASIO);
    
    // Initialize the system
    FMODGMS_Sys_Initialize(32);
    
    // Initialize the spectrum visualizer
    FMODGMS_FFT_Init(128);
    
    output_mode = FMODGMS_Sys_OutputModeToString(FMODGMS_Sys_Get_OutputMode());

    // Number of bins in Spectrum data
    //show_message(FMODGMS_FFT_Set_WindowSize(128));
    numBins = FMODGMS_FFT_Get_NumBins();
    peakDamping = 0.5;
    
    // init spectrum visualizer bins
    for (var i=0; i&lt;numBins; i++)
    {
        avgBin[i] = 1;
    } 
    
    // Load sounds
    // Load MIDI with included DLS bank
    FMODGMS_Snd_Set_DLS(working_directory + "PIT.dls");
    sound[1] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi - Bowser's Inside Story MIDIs\MUS_BOSS.mid"); //MLRPG4 - Tutorial.mid
    sound[2] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi Partners in Time MIDIs\MUS_LAST_BOSS2.mid"); //MLRPG4 - Trailer.mid
    sound[3] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi - Bowser's Inside Story MIDIs\MUS_MINI_GAME2.mid"); //Title Screen.mid
    sound[4] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Final Boss is Defeated.mid");
    sound[5] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - The End.mid");
    sound[6] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Sad Theme.mid");
    sound[7] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Peach's Castle.mid");
    sound[8] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Normal Battle.mid");
    sound[9] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Minigame.mid");
    sound[10] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Happiro Village.mid");
    sound[11] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Bad Guy's Castle.mid");
    sound[12] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\ML4 - Bad Guy Theme REMAKE.mid");
    sound[13] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - The Mushroom Kingdom.mid");
    sound[14] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Minigame 2.mid");
    sound[15] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - VictoryBeta.mid");
    sound[16] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Quiz.mid");
    sound[17] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - The Lake.mid");
    sound[18] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Makilu Village.mid");
    sound[19] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - File Select Questionmark.mid");
    sound[20] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Game Over.mid");
    sound[21] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4_-_Bowser's_Castle.mid");
    sound[22] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Forest.mid");
    sound[23] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Bad Guys Plan.mid");
    sound[24] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\InterludeBeforeFinalBoss.mid");
    sound[25] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Think.mid");
    sound[26] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Sea Beach.mid");
    sound[27] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\Cataquacks at the Beach.mid");
    sound[28] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Calm Theme.mid");
    sound[29] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Explonation.mid");
    sound[30] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Victory.mid");
    sound[31] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Get Item.mid");
    sound[32] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Under The Sea.mid");
    sound[33] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Nedvata Dessert.mid");
    sound[34] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Final Boss.mid");
    sound[35] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Toyo Town.mid");
    sound[36] = FMODGMS_Snd_LoadSound("S:\Mario and Luigi RPG 4 Soundtrack\MLRPG4 - Ending.mid");
    FMODGMS_Snd_Remove_DLS();

    // set custom loop points for looptest.ogg
    FMODGMS_Snd_Set_LoopPoints(sound[5],176400,352800);
    FMODGMS_Snd_Set_LoopMode(sound[5],1,-1);
    
    // set custom loop points for hiyalooped.mp3
    FMODGMS_Snd_Set_LoopPoints(sound[4],2168851,6680062);
    FMODGMS_Snd_Set_LoopMode(sound[4],1,-1);
    
    // set default loop points for DKC_Water-KM.mid
    if (os_type &lt;&gt; os_linux) 
    {
        FMODGMS_Snd_Set_LoopMode(sound[6],1,-1);
        FMODGMS_Snd_Set_LoopMode(sound[7],1,-1);        
    }
    
    //create a channel
    channel[0] = FMODGMS_Chan_CreateChannel();
    
    // Other Variables
    //vu_on = true;
    sound_index = 0;
    soundChoice = 0;
    soundFont = 0;
    sound_type = FMODGMS_Snd_TypeToString(FMODGMS_Snd_Get_Type(sound[sound_index]));
    is_playing = false;
    is_paused = false;
    hue = irandom(255);
    hue_shift = 0;
    channel_volume = 1;
    channel_frequency = 1;
    channel_pitch = 1;
    effect = -1;
    effectIndex = -1;
    normalize_spectrum = false;
    
    window_set_caption("FMODGMS Player Demo - The colours!");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>FMODGMS_Snd_Remove_DLS();
if soundFont = 0
    FMODGMS_Snd_Set_DLS(working_directory + "Fury.dls");
else if soundFont = 1
    FMODGMS_Snd_Set_DLS(working_directory + "Superstar Saga.dls");
else if soundFont = 2
    FMODGMS_Snd_Set_DLS(working_directory + "Galaxy Orchestra.dls");
else if soundFont = 3
    FMODGMS_Snd_Set_DLS(working_directory + "Grand Piano.dls");
else if soundFont &gt; 3
    soundFont = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// The colours!
{
    FMODGMS_Sys_Update();
    hue_shift = 0;
    hue = (hue + 1) mod 256;
    
    // normalize spectrum
    if (normalize_spectrum)
        FMODGMS_FFT_Normalize();
    
    // update spectrum visualizer values
    for (var i=0; i&lt;numBins; i++)
    {
        /*var bin = clamp(FMODGMS_FFT_Get_BinValue(i),0,1);
        avgBin[i] = avgBin[i] * peakDamping + bin * (1-peakDamping);*/
        
        avgBin[i] = clamp(FMODGMS_FFT_Get_BinValue(i),0,1);
    }  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>channel_frequency += 100;
FMODGMS_Chan_Set_Frequency(0,channel_frequency);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>channel_frequency -= 100;

// Only the OGG track can go below 0 Hz (for reverse playback).
// Make sure MOD tracks don't or else this function will stop working.

if (sound_index &lt;&gt; 4 &amp;&amp; channel_frequency &lt; 100)
    channel_frequency = 100;

FMODGMS_Chan_Set_Frequency(0,channel_frequency);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="81">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>channel_volume = clamp(channel_volume+0.01,0,1);
FMODGMS_Chan_Set_Volume(0,channel_volume);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>channel_pitch += 0.01;
FMODGMS_Chan_Set_Pitch(0,channel_pitch);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>channel_pitch -= 0.01;

// No negative multiplers allowed

if (channel_pitch &lt; 0.01)
    channel_pitch = 0.01;

FMODGMS_Chan_Set_Pitch(0,channel_pitch);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>channel_volume = clamp(channel_volume-0.01,0,1);
FMODGMS_Chan_Set_Volume(0,channel_volume);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free FMODGMS
{
    FMODGMS_Chan_StopChannel(channel);
    
    for (var i=0; i&lt;8; i++)
    {
        FMODGMS_Snd_Unload(sound[i]);
    }
    
    FMODGMS_Chan_Remove_Effect(channel[0],effect);
    FMODGMS_Effect_RemoveAll();
    
    FMODGMS_Chan_RemoveChannel(channel);
    
    FMODGMS_Sys_Close();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>soundFont = 1;
alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause/Unpause current sound
if (is_playing)
{
    if (!is_paused)
    {
        FMODGMS_Chan_PauseChannel(channel[0]);
        is_paused = true;
    }
    
    else
    {
        FMODGMS_Chan_ResumeChannel(channel[0]);
        is_paused = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="78">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>normalize_spectrum = !normalize_spectrum;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//toggle mute
FMODGMS_Chan_Set_Mute(0,!FMODGMS_Chan_Get_Mute(0));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>FMODGMS_Chan_Remove_Effect(0,effect);
FMODGMS_Effect_RemoveAll();

prevEffect = effectIndex
do
effectIndex = choose(   FMODGMS_EFFECT_CHORUS,
                        FMODGMS_EFFECT_DISTORTION,
                        FMODGMS_EFFECT_ECHO,
                        FMODGMS_EFFECT_FLANGE,
                        FMODGMS_EFFECT_HIGHPASS,
                        FMODGMS_EFFECT_LOWPASS,
                        FMODGMS_EFFECT_REVERB,
                        FMODGMS_EFFECT_TREMOLO);
until (prevEffect != effectIndex);

                        
effect = FMODGMS_Effect_Create(effectIndex);
//FMODGMS_Effect_Set_Parameter(effect, 0, 0);
FMODGMS_Chan_Add_Effect(0,effect,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>FMODGMS_Chan_Remove_Effect(0,effect);
FMODGMS_Effect_RemoveAll();
effectIndex = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    //vu_on = !vu_on;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sound_index &gt; 36
    sound_index = 1;
else
    sound_index+=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sound_index = 0
    sound_index = 36;
else
    sound_index-=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start/Stop playing current sound
{
    if (is_playing)
    {
        is_playing = false;
        FMODGMS_Chan_StopChannel(channel[0]);
    }
    
    else
    {
        is_playing = true;
        FMODGMS_Snd_Set_DLS(working_directory + "Fury.dls");
        FMODGMS_Snd_PlaySound(sound[sound_index],channel[0]);
        channel_volume = FMODGMS_Chan_Get_Volume(0);
        channel_frequency = FMODGMS_Chan_Get_Frequency(0);
        channel_pitch = FMODGMS_Chan_Get_Pitch(0);
    }
    
    is_paused = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This might not work in Linux, so don't do anything in that OS just to be safe
if (os_type &lt;&gt; os_linux)
    switch_track(+1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
